## （每日一题）128. 最长连续序列
**题目**：
给定一个未排序的整数数组，找出最长连续序列的长度。
要求算法的时间复杂度为 O(n)。

**示例**：
>输入: [100, 4, 200, 1, 3, 2]
输出: 4
解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。

**思路**:
如果不要求算法时间复杂度为 O(n)，那么可以用多种做法：
1、暴力解法，加到合适的 set 中，然后找出最长 set 的长度。时间复杂度 O(nlogn)。
2、排序，再找出最长连续子序列的长度。时间复杂度取决于排序算法，最佳为 O(nlogn)。
但这里要求时间复杂度为 O(n)，就很麻烦。想不出来，看了题解的方法也觉得不对。。。
```
// 题解使用 set 来存储所有元素，然后遍历每个元素去找 x+1 是否存在，然后更新长度。
// 但其实 set.contains() 方法也有时间复杂度，因此显然方法的时间复杂度不严格是 O(n)的
public int longestConsecutive(int[] nums) {
		int max = 0;
		HashSet<Integer> set = new HashSet<>();
		for(int i : nums) {
			set.add(i);
		}
		
		for(int i:nums) {
			// 遇到 i-1 的时候就可以直接跳过
			if(!set.contains(i-1)) {
				int cur = i;
				int nowLength = 1;
				while(set.contains(cur+1)) {
					cur ++;
					nowLength ++;
				}
                max = max>nowLength?max:nowLength;
			}
		}
		return max;
    }
```