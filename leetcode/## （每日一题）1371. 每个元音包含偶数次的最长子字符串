## （每日一题）1371. 每个元音包含偶数次的最长子字符串
**题目**：
给你一个字符串 s ，请你返回满足以下条件的最长子字符串的长度：每个元音字母，即 'a'，'e'，'i'，'o'，'u' ，在子字符串中都恰好出现了偶数次。
**示例1**：
>输入：s = "eleetminicoworoep"
输出：13
解释：最长子字符串是 "leetminicowor" ，它包含 e，i，o 各 2 个，以及 0 个 a，u 。

**示例2**：
>输入：s = "leetcodeisgreat"
输出：5
解释：最长子字符串是 "leetc" ，其中包含 2 个 e 。

**示例3**：
输入：s = "bcbcbc"
输出：6
解释：这个示例中，字符串 "bcbcbc" 本身就是最长的，因为所有的元音 a，e，i，o，u 都出现了 0 次。

**提示**：
* 1 <= s.length <= 5 x 10^5
* s 只包含小写英文字母。

**思路**：
方法一：先想到的是双指针 + 递归，但是超出时间限制。
```
	public static Set<Character> set = new HashSet<>();
	static {
		set.add('a');
		set.add('e');
		set.add('i');
		set.add('o');
		set.add('u');
	}
	public int findTheLongestSubstring(String s) {
		return findTheLongestSubstring(s, 0, s.length());
    }
	
	public int findTheLongestSubstring(String s,int start, int end) {
		if(required(s, start, end)) {
			return end-start;
		}else {
			return Math.max(findTheLongestSubstring(s, start+1, end), findTheLongestSubstring(s, start, end-1));
		}
    }
	
	public boolean required(String s, int start, int end) {
		Map<Character, Integer> map = new HashMap<>();
		for(int i=start;i<end;i++) {
			if(set.contains(s.charAt(i))) {
				map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
			}
		}
		for(Character c:map.keySet()) {
			if(map.get(c) % 2 !=0) {
				return false;
			}
		}
		return true;
	}
```
方法2：
```
	public int findTheLongestSubstring(String s) {
        int n = s.length(), res = 0;
        int[] dp = new int[32];
        int cur = 0;
        Arrays.fill(dp, n);
        dp[0] = -1;
        for(int i = 0 ; i < n ; i++){
            int id = getIndex(s.charAt(i));
            if(id >= 0) {
                cur ^= (1 << id);
            }
            dp[cur] = Math.min(dp[cur], i);
            res = Math.max(res, i - dp[cur]);
        }
        return res;
    }
    
    private int getIndex(char c){
        if(c == 'a'){
            return 0;
        } else if(c == 'e'){
            return 1;
        } else if(c == 'i'){
            return 2;
        } else if(c == 'o'){
            return 3;
        } else if(c == 'u'){
            return 4;
        } else {
            return -1;
        }
    }
```
方法3：
```
    public int findTheLongestSubstring(String s) {
        int n = s.length();
        int[] pos = new int[1 << 5];
        Arrays.fill(pos, -1);
        int ans = 0, status = 0;
        pos[0] = 0;
        for (int i = 0; i < n; i++) {
            char ch = s.charAt(i);
            if (ch == 'a') {
                status ^= (1 << 0);
            } else if (ch == 'e') {
                status ^= (1 << 1);
            } else if (ch == 'i') {
                status ^= (1 << 2);
            } else if (ch == 'o') {
                status ^= (1 << 3);
            } else if (ch == 'u') {
                status ^= (1 << 4);
            }
            if (pos[status] >= 0) {
                ans = Math.max(ans, i + 1 - pos[status]);
            } else {
                pos[status] = i + 1;
            }
        }
        return ans;
    }
```
